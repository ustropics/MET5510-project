load('Rossby_wave_2.mat')

global jj kk ll BPVy NN2 f0 dy dz m0 Lx Ubar f0 beta cplx

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% CONSTANTS/VARIABLES %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% grid parameters
ii = 360; % longitude grid
dx = Lx/ii; % longitude grid spacing

xx = 0.0:360/ii:360; % longitude coordinates
yy = linspace(45-25, 45+25, jj+1); % latitude coordinates
zz = linspace(0.0,10,kk+1); % height grid (H=10km)

XV = zeros(ll,1); % initailize streamfunction vector
% XV(:) = eigVec3(:,7);

%% Dr. Cai's EigenValue_elementary_analysis_linear_QG_model.pdf (pages 1-2)
% 1 is uniform/barotropic, 2 is a cross-section
% 7 is UL wind and LL wind (6-7 is baroclinic mode)
n_mode = 7; % this goes west fast, 2 is uFnstable
XV(:) = eigVec3(:,n_mode);
omega = imag(eigVal3(n_mode));
phase_speed = -omega/(2*pi*m0/Lx);

% from Dr. Cai's EigenValue_elementary_analysis_linear_QG_model.pdf
% slide 6
growth_rate = real(eigVal3(n_mode)); % real part of eigenvalue
eFolding = (1/growth_rate)/86400; % in units of days

% % Amplitude of eigenvector
eVec_amp = zeros(jj+1, kk+1); % slide 7-8
for l = 1: ll
    [j,k] = l2jk(l);
    eVec_amp(j,k) = XV(l).*conj(XV(l));
end

% set geopotential field
% gpt_h = XV2field(XV,ii,dx) * f0/gg;
latmax = (jj/2 + 1)/2;
levelmax = 1;

% finds the maximum value index in 3d
% [valuemax, indexmax] = max(gpt_h(:,latmax, levelmax));
gpt_h = XV2field(XV,ii,dx)*f0/gg;

% finds the maximum value index converting 3d to 1d
[valuemax, indexmax] = max(gpt_h(:));

% normalize the value
XV = (10/valuemax) * XV;

% normalize the evec solution so that the amplitude of geopotential
% height anomalies is 10 meters for all eigen solutions


%ymode = n_zero(1);

Amp = sqrt(sum(XV.*XV)/ll);
% XV(:) = (100/f0/Amp)*XV(:);
XV(:) 

QV = B * XV;
XVy = XV2XVy(XV); % d/dy at N and S boundary not calculated
XVx = XV2XVx(XV);
XVz = XV2XVz(XV);
% Vort = XV2vort(XV);

% from Dr. Cai's EigenValue_elementary_analysis_linear_QG_model.pdf
gpt_h = XV2field(XV,ii,dx)*f0/gg; % 3d geopotential height from slide 8
temp = (f0*HH/287) * XV2field(XVz, ii, dx); % from slide 11
ug = -XV2field(XVy, ii, dx);
vg = XV2field(XVx, ii, dx);
% vortfield =  XV2field(Vort, ii, dx);
pvfield = XV2field(QV, ii, dx);

% run series from day 0 to day 50, x from 0 to 360 degrees
hlat = floor(jj/4 + 1); % lat for hovmoller diagram
hlevel = 1; % vertical level for hovmoller diagram

% change dx to x to do meridional wind (slide 7)
gpt_h_hovmoler = XV2streamxtime(XV, ii, dx, omega, hlat, hlevel) * f0/gg;


% change XV to QV to plot PV
% gpt_h = XV2field(XV,ii,dx) * f0/gg;
pv = XV2field(QV,ii,dx);

time = 0:1:50;

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% PLOTTING %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

% Figure 1: Eigenvector amplitude
figure('units', 'inch', 'position', [4,2,16,12])
contourf(yy, zz, eVec_amp', 'linestyle', 'none');
xlabel('Latitude')
ylabel('Height (km)')
set(gca, 'fontsize', 22, 'color', 'w')
title =(['Zonal wave # = ', num2str(m0), ', eMode # =', num2str(n_mode)...
    ', real eVal = ', num2str(growth_rate), ...
    ', imag eVal = ', num2str(omega)]);
colorbar

% Figure 2: Meridional cross-section of geopotential height
figure('units', 'inch', 'position', [4,2,16,12])
contourf(xx, zz, squeeze(gpt_h(:,jj/2+1,:))', 'LineStyle', 'none');
colorbar;
xlabel('Longitude')
ylabel('Height')
set(gca, 'xtick', 0:30:360)
set(gca, 'ytick', 0:5:50)

% Figure 3: Hovmoller diagram of geopotential height
figure('units', 'inch', 'position', [4,2,16,12])
contourf(xx, time, gpt_h_hovmoler', -100:2:100, 'LineStyle', 'none');
set(gca,'xlim',[0,90])
colorbar;
xlabel('Longitude')
ylabel('Time (days')
set(gca, 'xtick', 0:30:360)
set(gca, 'ytick', 0:5:50)
% set(gca, 'ylim', )


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%% MAIN FUNCTIONS %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

%% Function XV2field: Convert from streamfunction vector XV to 3D field
% From Dr. Cai's EigenValue_elementary_analysis_linear_QG_model.pdf
% Page 2 (Eigenmode solutions)
function field = XV2field(XV,ii,dx)
global jj kk ll cplx m0 Lx

field = zeros(ii+1, jj+1, kk+1);


for l = 1:ll
   [j,k] = l2jk(l);
   for i = 1:ii+1
        xlon = (i-1)*dx;
        field(i,j,k) = real(XV(l) * exp(cplx*2*pi*m0*xlon/Lx));
    end
end
end


%% Function xtime: compute hovmoller diagram (streamfunction over time)
% From Dr. Cai's EigenValue_elementary_analysis_linear_QG_model.pdf
% Page 6 (diagnostic analysis)
function xtime = XV2streamxtime(XV,ii,dx,omega,ylat,zlev)
global cplx m0 Lx

xtime = zeros(ii+1, 51);

l = jk2l(ylat, zlev);
for day = 1: 51
    sec = (day-1)*86400;
    for n = 1:ii+1
        xlon=(n-1)*dx;
        xtime(n,day) = real(XV(l)*exp(cplx*(2*pi*m0*xlon/Lx+omega*sec)));
    end
end
end

%% Function field: convert streamfunction vector XV to 3D
% From Dr. Cai's EigenValue_elementary_analysis_linear_QG_model.pdf
% Page 2 (Eigenmode solutions)
function field = XVz2field(XV,ii,dx)

global jj kk ll cplx m0 Lx dz

end

%% helper functions
function l = jk2l(j,k)
global jj

l = j - 1 + (k-1) * (jj-1);

end

function [j,k] = l2jk(l)
global jj

k = floor((l-1)/(jj-1))+1;
j = l+1 - (k-1)*(jj-1);
end

%% Function XVy: compute meridional deri
function XVy = XV2XVy (XV)
global jj kk ll dy

XVy = zeros(ll,1);

for k = 1:kk+1
    for j = 2:jj

        l = jk2l(j,k);
        lnh = jk2l(j+1,k);
        lsh = jk2l(j-1,k);

        if(j == 2)
            XVsh=0;
        else
            XVsh=XV(lsh);
        end

        if(j == jj)
            XVnh = 0;
        else
            XVnh = XV(lnh);
        end

        XVy(l) = ( XVnh - XVsh) /2/dy;
    end
end
end

function XVx = XV2XVx (XV)
global jj kk ll m0 Lx cplx

XVx = zeros(ll, 1);

for k = 1:kk+1

    for j = 2:jj
        l=jk2l(j,kk);
        XVx(l) = cplx*(2*pi*m0/Lx) * XV(l);
    end
end
end

function XVz = XV2XVz(XV)
global jj kk ll dz
XVz = zeros(ll,1);

for k = 2:kk
    for j = 2:jj

        l = jk2l(j,k);
        lup = jk2l(j,k+1);
        ldw = jk2l(j, k-1);

        XVz(l) = (XV(lup)-XV(ldw))/2/dz;
    end
end

k = 1;
for j = 2:jj
    l = jk2l(j,k);
    lup = jk2l(j, k+1);
    ldw = l
    XVz(l) = (XV(lup) - XV(ldw))/dz;
end

k = kk+1;

for j = 2:jj
    l = jk2l(j,k);
    ldw = jk2l(j, k-1);
    lup=l;
    XVz(l) = (XV(lup) - XV(ldw))/dz;
end
end


% function field = XVz2field(XV,ii,dx)

% do for zonal wind, meridional, vertical, and PV

% figure;contourf(xx,0:1:50,gpt_h_hovmoler');colorbar

% gpt_h, ug, vg, temp

% figure;contourf(xx,yy, (squeeze(gpt_h(:,:,1)))');colorbar
% figure;contourf(xx,yy, (squeeze(ug(:,:,1)))');colorbar
% figure;contourf(xx,yy, (squeeze(vg(:,:,1)))');colorbar

% figure;contourf(xx,yy, (squeeze(temp(:,:,kk/2+1)))');colorbar
% figure;contourf(xx,yy, (squeeze(gpt_h(:,:,kk+1)))');colorbar
